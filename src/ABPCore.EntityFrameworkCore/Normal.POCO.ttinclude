<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#
fileManager.StartHeader();
// Copyright (C) Sync Soft 2017
// v1.0
#>

<#if (ElementsToGenerate.HasFlag(Elements.Poco))
{
    if (UseDataAnnotations) {#>
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
<#  }
}
#>

namespace <#=Namespace#>
{
<#
var usingsContext = new List<string>();
var usingsAll = new List<string>();

usingsAll.AddRange(AdditionalNamespaces.Where(x => !string.IsNullOrEmpty(x)));

if ((ElementsToGenerate.HasFlag(Elements.PocoConfiguration) ||
     ElementsToGenerate.HasFlag(Elements.Context) ||
     ElementsToGenerate.HasFlag(Elements.UnitOfWork)) &&
    (!ElementsToGenerate.HasFlag(Elements.Poco) && !string.IsNullOrWhiteSpace(PocoNamespace)))
    usingsAll.Add(PocoNamespace);

if (ElementsToGenerate.HasFlag(Elements.PocoConfiguration) &&
    (!ElementsToGenerate.HasFlag(Elements.Context) && !string.IsNullOrWhiteSpace(ContextNamespace)))
    usingsAll.Add(ContextNamespace);

if (ElementsToGenerate.HasFlag(Elements.Context) &&
    (!ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(UnitOfWorkNamespace)))
    usingsAll.Add(UnitOfWorkNamespace);

if (ElementsToGenerate.HasFlag(Elements.Context) &&
    (!ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !string.IsNullOrWhiteSpace(PocoConfigurationNamespace)))
        usingsAll.Add(PocoConfigurationNamespace);

if (!GenerateSeparateFiles)
{
    usingsAll.AddRange(usingsContext);
}
foreach(var usingStatement in usingsAll.Distinct().OrderBy(x => x)) { #>
    using <#= usingStatement #>;
<# } #>
<# if(!GenerateSeparateFiles) { #>
    using System.Data.Common;
    using Abp.Domain.Entities;
	using Abp.EntityFrameworkCore;
	using Microsoft.EntityFrameworkCore;

<# } #>

<# if (ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(DbContextInterfaceName))
{
    fileManager.StartNewFile(DbContextInterfaceName + FileExtension);
    if (!GenerateSeparateFiles)
    { #>
    #region Unit of work

<# }#>
    <# if(MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(MakeDbContextInterfacePartial) { #>partial <# } #>interface <#=DbContextInterfaceName #> : <#= DbContextInterfaceBaseClasses #>
    {
<#
foreach (Table tbl in from t in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
        System.Data.Entity.DbSet<<#=tbl.NameHumanCaseWithSuffix #>> <#=Inflector.MakePlural(tbl.NameHumanCase) #> { get; set; }<#if (IncludeComments != CommentsStyle.None)
{ #> // <#=tbl.Name #>
<# }
else
{ #>

<# } #>
<# } #>

<#foreach (string s in AdditionalContextInterfaceItems.Where(x => !string.IsNullOrEmpty(x)))
{ #>
        <#=s #>
<# } #>
        int SaveChanges();
<# if (IsSupportedFrameworkVersion("4.5")) { #>
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
<# } #>
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
<# if (storedProcs.Any()) { #>

        // Stored Procedures
<#      // Interface
foreach (StoredProcedure sp in storedProcs.Where(s => !s.IsTVF))
{
    int returnModelsCount = sp.ReturnModels.Count;
    if (returnModelsCount == 1)
    { #>
        <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp)#>(<#=WriteStoredProcFunctionParams(sp, false) #>);
        <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp)#>(<#=WriteStoredProcFunctionParams(sp, true) #>);
<#  } else { #>
        <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp)#>(<#=WriteStoredProcFunctionParams(sp, false) #>);
<#  }
    if (IsSupportedFrameworkVersion("4.5"))
    {
        if(StoredProcHasOutParams(sp) || sp.ReturnModels.Count == 0) { #>
        // <#=WriteStoredProcFunctionName(sp)#>Async cannot be created due to having out parameters, or is relying on the procedure result (<#=WriteStoredProcReturnType(sp)#>)
<# } else { #>
        System.Threading.Tasks.Task<<#=WriteStoredProcReturnType(sp)#>> <#=WriteStoredProcFunctionName(sp)#>Async(<#=WriteStoredProcFunctionParams(sp, false) #>);
<# } #>
<# } #>

<#
}

if (IncludeTableValuedFunctions)
{ #>

        // Table Valued Functions
<#      foreach (StoredProcedure sp in storedProcs.Where(s => s.IsTVF))
        {
            string spExecName = WriteStoredProcFunctionName(sp);
            string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
        System.Linq.IQueryable<<#= spReturnClassName #>> <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, false)#>);
<#
    }
}
#>
<# /**/} #>
    }

<# }
 if(!string.IsNullOrWhiteSpace(MigrationConfigurationFileName)) {
       fileManager.StartNewFile(MigrationConfigurationFileName + FileExtension);  #>
<# if(!GenerateSeparateFiles) { #>
    // ************************************************************************
    // Db Migration Configuration
<# } #>
<#if(IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    internal sealed <# if(MakeClassesPartial) { #>partial <# } #>class <#=MigrationConfigurationFileName#> : System.Data.Entity.Migrations.DbMigrationsConfiguration<<#=DbContextName#>>
    {
        <# if(MakeClassesInternal) { #>internal<# } else { #>public<# } #> <#=MigrationConfigurationFileName#>()
        {
            AutomaticMigrationsEnabled = <# if (AutomaticMigrationsEnabled) { #>true<# } else { #>false<# } #>;
            AutomaticMigrationDataLossAllowed = <# if (AutomaticMigrationDataLossAllowed) { #>true<# } else { #>false<# } #>;
<# if (!string.IsNullOrEmpty(ContextKey)) { #>
            ContextKey = "<#= ContextKey #>";
<# } #>
        }

        //protected override void Seed(<#=DbContextName#> context)
        //{

            // This method will be called after migrating to the latest version.

            // You can use the DbSet<T>.AddOrUpdate() helper extension method
            // to avoid creating duplicate seed data. E.g.
            //
            //   context.People.AddOrUpdate(
            //     p => p.FullName,
            //     new Person { FullName = "Andrew Peters" },
            //     new Person { FullName = "Brice Lambson" },
            //     new Person { FullName = "Rowan Miller" }
            //   );
            //
        //}
    }

<# }
if(ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(DbContextInterfaceName) && !GenerateSeparateFiles) { #>
    #endregion

<# }
    if(ElementsToGenerate.HasFlag(Elements.Context)){
    fileManager.StartNewFile(DbContextName + FileExtension); #>
<# if(!GenerateSeparateFiles) { #>
    #region Database context

<# } else {#>
    using System.Data.Common;
    using Abp.Domain.Entities;
	using Abp.EntityFrameworkCore;
	using Microsoft.EntityFrameworkCore;

<# } #>

<#if(IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(MakeClassesPartial) { #>partial <# } #>class <#=DbContextName#> : ExtendedDbContextBase
    {
<#
foreach(Table tbl in from t in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
        public virtual DbSet<<#=tbl.NameHumanCaseWithSuffix#>> <#=Inflector.MakePlural(tbl.NameHumanCase)#> { get; set; }<#if(IncludeComments != CommentsStyle.None){#>

<# } else { #>

<# } #>
<# } #>

		public <#=DbContextName#>(DbContextOptions<<#=DbContextName#>> Options)
			: base(Options)
        {
        }

        //public override void Initialize()
        //{
        //    this.SetFilterGlobalParameterValue("SoftDelete", "IsDeleted", true);
        //    this.SetFilterScopedParameterValue("SoftDelete", "IsDeleted", true);
    
        //    this.SetFilterGlobalParameterValue("MustHaveTenant", "tenantId", AbpSession.TenantId ?? 0);
        //    this.SetFilterScopedParameterValue("MustHaveTenant", "tenantId", AbpSession.TenantId ?? 0);
    
        //    this.SetFilterGlobalParameterValue("MayHaveTenant", "tenantId", this.AbpSession.TenantId ?? 0);
        //    this.SetFilterScopedParameterValue("MayHaveTenant", "tenantId", this.AbpSession.TenantId ?? 0);
    
        //    base.Initialize();
        //}


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            <#foreach(Table tbl in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase)){#>modelBuilder.Entity<<#=tbl.NameHumanCase#>>(entity =>
            {
				entity.ToTable("<#=tbl.Name#>");
				<#if(!UseDataAnnotations){#>entity.HasKey(<#=tbl.PrimaryKeyNameHumanCase()#>);
				<#}foreach(Column col in tbl.Columns.Where(x => !x.Hidden && !string.IsNullOrEmpty(x.Config)).OrderBy(x => x.Ordinal)){#><#=col.Config #>
				<# } #>});

            <# } #>
		}

<#if(MakeClassesPartial) {#>

<#}#>
<# if (storedProcs.Any())
{ #>

        // Stored Procedures

<#
if (IncludeTableValuedFunctions)
{ #>
        // Table Valued Functions
<#
        foreach (StoredProcedure sp in storedProcs.Where(s => s.IsTVF))
        {
            string spExecName = WriteStoredProcFunctionName(sp);
            string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
        [System.Data.Entity.DbFunction("<#=DbContextName#>", "<#=sp.Name#>")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "<#=sp.Schema#>"<#if (sp.ReturnModels.Count == 1 && sp.ReturnModels[0].Count == 1) {#>, ResultColumnName = "<#=sp.ReturnModels[0][0].ColumnName#>"<#}#>)]
        public IQueryable<<#= spReturnClassName #>> <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, false)#>)
        {
<#= WriteTableValuedFunctionDeclareSqlParameter(sp) #>
            return ((System.Data.Entity.Infrastructure.IObjectContextAdapter)this).ObjectContext.CreateQuery<<#=spReturnClassName#>>("[<#=DbContextName#>].[<#=sp.Name#>](<#= WriteStoredProcFunctionSqlAtParams(sp) #>)", <#= WriteTableValuedFunctionSqlParameterAnonymousArray(sp) #>);
        }

<# } } }
/**/#>    }
<# }
if(ElementsToGenerate.HasFlag(Elements.Context) && !GenerateSeparateFiles) { #>
    #endregion

<# }
 if(ElementsToGenerate.HasFlag(Elements.Poco)){
 if(!GenerateSeparateFiles) { #>
    #region POCO classes

<#}
foreach(Table tbl in from t in tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
{
#>
<# fileManager.StartNewFile(tbl.NameHumanCaseWithSuffix + FileExtension);
 if(!GenerateSeparateFiles) { #>

<#} else {#>
	using System;
    using Abp.Domain.Entities;

<# }if(!tbl.HasPrimaryKey) { #>
    // The table '<#=tbl.Name#>' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
<# } #>
<#if(IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>
<# } #>
<# WritePocoClassAttributes(tbl);#>
<#if(IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCaseWithSuffix#><#=WritePocoBaseClasses != null ? WritePocoBaseClasses(tbl) : "" #> : IDbEntity
    {
<# WritePocoBaseClassBody(tbl); #>
<# foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(x => !x.Hidden))
{
#>
<#= WritePocoColumn(col) #>
<# } #>
<#
if(tbl.ReverseNavigationProperty.Count() > 0)
{
#>

<#if(IncludeComments != CommentsStyle.None){#>        // Reverse navigation

<# } #>
<#
foreach(var s in tbl.ReverseNavigationProperty.OrderBy(x => x.Definition))
{ #>
<# if(IncludeComments != CommentsStyle.None){#>        /// <summary>
        /// <#=s.Comments ?? "" #>
        /// </summary>
<# }
   foreach (var rnpda in AdditionalReverseNavigationsDataAnnotations) {#>
        [<#=rnpda #>]
<# }
   if (s.AdditionalDataAnnotations != null) {
     foreach (var fkda in s.AdditionalDataAnnotations) {#>
        [<#=fkda #>]
<#   }
   } #>
        <#=s.Definition #>
<# } } #>
<# if(tbl.HasForeignKey) { #>

<#if(IncludeComments != CommentsStyle.None && tbl.Columns.SelectMany(x => x.EntityFk).Any()){#>        // Foreign keys
<# } #>
<#
foreach(var entityFk in tbl.Columns.SelectMany(x => x.EntityFk).OrderBy(o => o.Definition))
{ #>

<# if(IncludeComments != CommentsStyle.None){#>        /// <summary>
        /// <#=entityFk.Comments #>
        /// </summary>
<# }
   foreach (var fkda in AdditionalForeignKeysDataAnnotations) {#>
        [<#=fkda #>]
<# }
   if (entityFk.AdditionalDataAnnotations != null) {
     foreach (var fkda in entityFk.AdditionalDataAnnotations) {#>
        [<#=fkda #>]
<#   }
   } #>
        <#=entityFk.Definition #>
<# } } #>
<#
if (!UsePropertyInitializers){
if(tbl.Columns.Where(c => c.Default != string.Empty && !c.Hidden).Count() > 0 || tbl.ReverseNavigationCtor.Count() > 0 || MakeClassesPartial)
{
#>

        public <#=tbl.NameHumanCaseWithSuffix#>()
        {
<#
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(c => c.Default != string.Empty && !c.Hidden))
{
#>
            <#=col.NameHumanCase #> = <#=col.Default #>;
<# } #>
<#
foreach(string s in tbl.ReverseNavigationCtor)
{
#>
            <#=s #>
<# }
if(MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(MakeClassesPartial) {#>

        partial void InitializePartial();
<#} }
}#>
    }

<# } }
if(ElementsToGenerate.HasFlag(Elements.Poco) && !GenerateSeparateFiles) { #>
    #endregion

<# }
if(ElementsToGenerate.HasFlag(Elements.PocoConfiguration)){
if(!GenerateSeparateFiles) { #>
    #region POCO Configuration

<# } #>
<#
foreach(Table tbl in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase))
{
#>
<# fileManager.StartNewFile(tbl.NameHumanCaseWithSuffix + ConfigurationClassName + FileExtension);
if(IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>
<# } #>
<#if(IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCaseWithSuffix + ConfigurationClassName#> : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<<#=tbl.NameHumanCaseWithSuffix#>>
    {
        public <#=tbl.NameHumanCaseWithSuffix + ConfigurationClassName#>()
            : this(<# if (string.IsNullOrEmpty(tbl.Schema)) { #>""<# } else { #>"<#=tbl.Schema#>"<# } #>)
        {
        }

        public <#=tbl.NameHumanCaseWithSuffix + ConfigurationClassName#>(string schema)
        {
<#if(!UseDataAnnotationsSchema){ if (!string.IsNullOrEmpty(tbl.Schema)) { #>
            ToTable("<#=tbl.Name#>", schema);
<# } else { #>
            ToTable("<#=tbl.Name#>");
<# }}
if(!UseDataAnnotations){#>
            HasKey(<#=tbl.PrimaryKeyNameHumanCase()#>);

<# } #>
<#
foreach(Column col in tbl.Columns.Where(x => !x.Hidden && !string.IsNullOrEmpty(x.Config)).OrderBy(x => x.Ordinal))
{
#>
            <#=col.Config #>
<# } #>
<# if(tbl.HasForeignKey) { #>

<#if(IncludeComments != CommentsStyle.None && tbl.Columns.SelectMany(x => x.ConfigFk).Any()){#>            // Foreign keys
<# } #>
<#
foreach(var configFk in tbl.Columns.SelectMany(x => x.ConfigFk).OrderBy(o => o))
{
#>
            <#=configFk #>
<# } } #>
<#
foreach (string s in tbl.MappingConfiguration)
{
#>
            <#=s#>
<# } #>
<#if(MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(MakeClassesPartial) {#>
        partial void InitializePartial();
<#}#>    }

<# } }
if(ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !GenerateSeparateFiles) { #>
    #endregion

<# }#>
<# fileManager.StartFooter(); #>
}
// </auto-generated>
<# fileManager.EndBlock();
if(GenerateSeparateFiles)
    fileManager.Process(); #>
